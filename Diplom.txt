МИНИСТЕРСТВО ОБРАЗОВАНИЯ РЕСПУБЛИКИ БЕЛАРУСЬ

Учреждение образования
«Гомельский государственный университет
имени Франциска Скорины»

Факультет математики и технологий программирования
Кафедра вычислительной математики и программирования

					
Допущена к защите

Зав. кафедрой_____________Д.С. Кузьменков

"____"________________2018 г.



Создание Web-сервиса генерации псевдо рукописных документов на основании напечатанного текста с использованием технологии Bootstrap, Django, Mysql, Amazon S3 и Celery+RabbitMQ
Дипломная работа





Исполнитель 
студент группы ПМ-52   		____________  		E.C. Бычков


Научный руководитель
к.ф.-м.н., доцент              		____________  		П.В. Бычков


Рецензент                              
к.ф.-м.н., доцент            			_____________  		А.В. Клименко



Гомель 2018


Содержание


     Введение


     1 Обзор технологий для разработки
     1.1 Ситуация на рынке серверных языков
     На данный момент PHP используется на более чем 82% сайтах, среди тех, про которых есть достоверная информация. Этот язык изначально проектировался как серверный и довольно уже долгое время является безоговорочным лидером в плане распространенности. Благодаря этому, существует огромное количество библиотек и фреймворков для PHP, делающие его пригодным для практически любой задачи; кроме того, сообщество PHP-разработчиков просто огромно, так что при возникновении каких-либо проблем, найти в интернете решение будет заметно больше, чем с другими языками. Другое достоинство PHP заключается в том, что он достаточно легок в изучении, в отличие, например, от Java или C++. Несмотря на эти весомые преимущества, PHP в последние лет 10 теряет свою популярность. Вот основные причины этого:
     а) посредственный дизайн – это одна из основных претензий в адрес языка. В PHP используется динамическая типизация, которая, с одной стороны, предоставляет больше свободы и немного ускоряет процесс разработки, а с другой – ведет ко многим ошибкам. Кроме того, он основан сразу на множестве других языков, например, Perl, C, C++, Java и т.д., так что в некотором роде он лишен собственного стиля;
     б) легкость написания «плохого» кода – этот пункт вытекает из предыдущего. Недостатки в дизайне оставляют пространство для написания неэффективного, неочевидного, непостоянного кода. В связи с невероятной популярностью языка, существует большое количество уже написанного плохого кода, который можно по неопытности использовать в своем проекте. Это также негативно сказывается на работе в команде – разбираться в чужом коде приходится еще более тщательно и делать это становится сложнее;
     в)  слабая типизация – хотя это и способствует гибкости языка, делает его более сильно подверженным различным багам;
     г)  масштабируемость – несмотря на то, что PHP хорошо подходит для проектов среднего размера, масштабируемость дальше может вызывать проблемы. Связано это с низкой модульностью языка и уже упомянутыми проблемами излишней гибкости и написания неэффективного кода. 
     Если не учитывать распространенность, то у PHP появляется несколько серьезных конкурентов. Самые популярные приведены на рисунке 1.
       
      Рисунок 1
     Останавливаться на всех не будем, вкратце рассмотрим только первые три:
     а) Python – язык общего назначения, который можно встретить практически в любой области от робототехники, до финансовых структур и статистического анализа. Его популярность заключается в сочетании простоты в изучении с хорошим и лаконичным дизайном, который способствует быстрой разработке и прототипированию. Для веб-разработки на Python существует множество фреймворков, например Flask, Pyramid и Django. У всех них есть свои достоинства, про достоинства последнего будет рассказано далее;
     б) Ruby on Rails – фреймворк для языка Ruby, основное преимущество которого заключается как раз в самом Ruby, а именно: объектно-ориентированность, легкость для чтения и понимания, предсказуемый синтаксис и поведение. Ruby on Rails во многом похож на Django, продвигает схожие идеалы и подход к разработке;
     в) Node.js – фреймворк для превращения client-side языка JavaScript в нечто, исполняемое на сервере. Одно из главных преимуществ Node.js заключается в том, что многие люди, занимающиеся веб-разработкой уже знают JavaScript, так что изучение и использование этого фреймворка для них заметно облегчено.
     
     
     
     
     1.2 Базы данных и СУБД
     Базы данных созданы для того, чтобы решать очень важную проблему: хранение данных. Это могут быть какие угодно данные: сотрудники, товары, заказы, посетители сайтов; могут быть представлены в виде дат, целых или дробных чисел, строк или булевых переменных. На самом деле, одно лишь наличие данных – не достаточно хороший повод заведения базы данных. Многие небольшие компании довольно долго эффективно пользовались таблицами в Excel и аналогичных программах. Сами данные не являются проблемой, но они появляются дальше. Вот список некоторых: 
     а) Размер – то, что начиналось как небольшой объем данных имеет тенденцию разрастаться. Таким образом однажды хорошо работающий документ, содержащий в себе сотню строк, становится очень неповоротливым и тяжелым, накопив в себе несколько миллионов строк; 
     б) Простота обновления – при работе с системой, построенной на файлах, возникает проблема, когда несколько пользователей пытаются внести изменения одновременно. В итоге получится что каждый изменяет данные предыдущего;
     в) Точность – как правило нет никакой системы защиты от случайных ошибок, так что чем больше разрастается таблица, тем менее достоверная она становится;
     г) Безопасность – часто этой таблицей необходимо с кем-то делиться. Но необходимость делиться с кем-то, не означает что делиться можно со всеми. Возникает множество вопросов, которые проблематично решать в рамках данного подхода – кто может просматривать эту таблицу? Кто может ее редактировать? Если таблицу отредактировали, то, как узнать, кто ответственен за какие изменения?
     д) Избыточность и дублирование – сама по себе избыточность не является минусом – резервные копии тоже избыточны. Однако относительно самой информации она не слишком полезна, так как ведет к конфликтам;
     е) Важность – случается всякое, бывают сбои, ведущие к потере информации. Иногда потеря информации означает лишь небольшую потерю времени, неудобство, но есть множество отраслей, где даже минимальная потеря информации является неприемлемой.
      Все это – причины, почему понадобились базы данных и это те проблемы, которые они призваны решить. Базы данных предоставляют структурированный подход к хранению данных, в котором правила настраиваются исходя из потребностей и приоритетов отрасли. 
     Системы управления базами данных или СУБД – это обобщающий термин, которым обозначаются всевозможные решения (то есть компьютерные программы или встраиваемые библиотеки), зачастую работающие совсем по- разному. Эти приложения управляют или помогают управлять наборами информации. Так как поступающая информация может отличаться в размерах и формах, было разработано множество СУБД.[1] 
     СУБД построены на моделях – структурах, определенных для управления данными. Каждая появляющаяся СУБД работает отлично от других, касательно определений и операций хранения и получения упомянутых данных. 
     Каждая СУБД реализует различную модель базы данных, логически структурирующие данные. Эти модели являются первым шагом и главным решающим фактором в вопросе того, как база данных будет обрабатывать и управляться с информацией. Существует несколько типов моделей, которые четко определяют, как именно данные будут структурированы. Самая популярная из них – реляционная. 
     Реляционная модель была представлена в 70-х годах. Она предлагает очень математический способ структурирования, хранения и использования данных, а также расширения старых концептов, вроде плоской модели, модели сети и т.д. при помощи связей. Связи предоставляют преимущества группированного хранения данных в качестве ограниченных коллекций, посредством чего таблицы, содержащие информацию в структурированном виде (например, имя и адрес), связывают все входные данные, присваивая значения различным атрибутам.
     Благодаря десятилетиям изучений и разработок, базы данных, основанные на реляционной модели, работают очень эффективно и надежно. В купе с продолжительным опытом работы у программистов с такими решениями, использование реляционных баз данных стало стандартным выбором в проектах, где сохранность данных являлось приоритетом. 
     Хотя реляционная модель является очень гибкой и мощной, все же существует несколько проблем, которые ей не решаются. 
     В последнее время ряд решений, называющихся NoSQL, начали стремительно набирать популярность. Происходило это благодаря обещанию решить те проблемы, которые реляционным базам не удалось, а также благодаря некоторой другой дополнительной функциональности. За счет искоренения жесткой структурированности данных, хранящих описания стилей внутри реляционной модели, эти базы данных работали, предлагая намного более свободный путь работы с данными, обеспечивая, тем самым, простоту и гибкость. Используя такой неструктурированный (или структурируемый на лету) подход, NoSQL решения стремятся избавиться от ограничений, накладываемых строгими связями, и предлагают множество разных способов хранения и использования данных для специфических сценариев использования. 
     Несмотря на то, что существует масса различных СУБД, в каждый период времени существует лишь небольшое количество решений, которые бы быстро стали популярными и оставались таковыми на протяжении длительного времени. Последние несколько десятилетий безоговорочной популярностью пользуются 
     Реляционные СУБД. Реляционная СУБД берет свое название от модели, которую она реализует, то есть Реляционной, о которой говорилось ранее. На сегодняшний день и в обозримом будущем они – самый популярный выбор для надежного, эффективного и безопасного хранения данных.
     Эти СУБД требуют четко определенного набора схем для того, чтобы принимать данные. Эти схемы определяются пользователем и формируют то, как данные хранятся и используются.
     Ниже на рисунке 2 приведено сравнение популярности MySQL, PostgreSQL и SQLite по данным сайта DB-Engines: 
      Рисунок 2.
     Вот некоторые популярные реляционные СУБД:
     а) SQLite – мощная встраиваемая файловая СУБД. Представляет из себя самостоятельную библиотеку, подключаемую в приложение, которое будет ее использовать. SQLite предлагает хороший набор инструментов для работы с любым типом информации с простотой и меньшим количеством ограничений, по сравнению с серверными базами. Когда приложение делает запрос, интеграция обрабатывает его при помощи функций и прямых обращений к файлу, содержащему данные, вместо того, чтобы общаться посредством различных интерфейсов (портов, сокетов). Это делает SQLite очень быстрым и эффективным. Основной недостаток – нет поддержки привилегий пользователей (и системы пользователей вообще);
     б) MySQL – самая популярная СУБД, которая используется в огромном множестве сайтов и приложений. Имеет богатую функциональность и относительно прост в изучении. Будучи очень популярным, имеет большую поддержку со стороны сообщества в виде различных обучающих материалов и готовых библиотек. Имеет немало недостатков, среди которых: относительная ограниченность, проблемы с надежностью, стагнация в развитии;
     в) PostgreSQL – самая продвинутая СУБД из трех. Является очень расширяемой и программируемой СУБД, поддерживающей собственный вид процедур – «хранимые процедуры». Это функции, которые упрощают выполнение сложных, но повторяющихся операций. Благодаря всему этому является очень универсальным решением. Недостаток заключается в том, что в ситуациях, где требуется большое количество простых запросов, PostgreSQL уступает тому же MySQL в производительности.
     Сравнение скорости выполнения основных операций приведены на рисунке 3:
       
      Рисунок 3
     
     
     
     1.3 Обоснование выбора в пользу Python + Django
     Для разработки дипломной работы было решено использовать Python, а
именно фреймворк Django. Так как написан и предназначен он именно для Python, этот фреймворк старается следовать той же философии. Разработчики стремились сделать его как можно более простым, прямолинейным, очевидным, легкопортируемым. Рассмотрим основные преимущества использования Django.
     Python – это, скорее всего, самый простой язык программирования дляизучения. Благодаря использованию конструкций из естественных языков  (параграфы и отступы) и простого синтаксиса понимание структуры программы существенно упрощается, по сравнению с другими популярными языками программирования. В доказательство этому, большая доля различных курсов программирования в институтах и колледжах используют именно Python.[2] На приведенном ниже рисунке представлен график, показывающий сколько учебных заведений, входящих в список 39 лучших в США, используют тот или иной язык программирования. Кроме того, Python универсален. Он лежит в  основе множества как серверного ПО, так и пользовательских программ на PC и Mac.
     Сравнение популярности различных языков программирования в учебных заведениях США представлен на рисунке 4. 
       
      Рисунок 4
     Комплект поставки – обо многих часто используемых в веб-разработке вещах сообщество Django уже позаботилось, так что начиная делать проект не придется писать все с нуля, часто достаточно будет настроить. Примерами такой функциональности являются: приложение для администрации, аутентификация, работы с базой данных, работы со специальными страницами (вроде пользовательского соглашения), геолокация, сессия и обработка cookie и т.д. 
     Безопасность – безопасность является очень серьезным аспектом и имеет высокий приоритет в Django. Фреймворк снабжен множеством инструментов, позволяющим бороться со многими популярными видами атак, вроде XSS и SQL-инъекций. 
     Масштабируемость – используемые системы кэширования и дизайн фреймворка предполагает возможность масштабирования. Многие популярные сайты, которые справляются с огромной нагрузкой ежедневно написаны на Django. 
     Проверен временем – хороший способ узнать, надежен ли какой-либо веб-фреймворк – это посмотреть, долго ли он существует, развивается ли он и кто из больших компаний его использует. С 2005 года, когда был открыт его исходный код, Django развивался и получил широкое распространение среди больших международных компаний, вроде Pinterest, Instagram, Disqus, Bitbucket, EvenBrite и других. 
     Документация – даже в ранних версиях, разработчики Django старались делать документацию максимально емкой и доступной. Документация этого фреймворка, наравне с документацией для Python, является одной из лучших в отрасли.[3]
     
     
2 Введение в Django
     Django – это бесплатный веб-фреймворк с открытым исходным кодом, написанный на Python. Он поддерживается Django Software Foundation (DSF), независимой некоммерческой организацией.
     
     
     
     2.1 История
     Django был создан осенью 2003 года двумя веб-программистами – Адрианом Головатый и Саймоном Виллисоном во время их работы в газетном издательстве Lawrence Journal-World. Как раз тогда они начали использовать Python для создания веб-приложений. В июле 2005 года Django был выпущен публично с лицензией BSD. Название такое фреймворк получил в честь французского джазз гитариста Джанго Рейнхардта. 
     В июле 2008 было объявлено, что только что организованная компания Django Software Foundation будет заниматься поддержкой Django в будущем.
     
     
     
     
     4.2 MVC через призму Django
     MVC – шаблонный дизайн Model-View-Controller. Концепт, предполагающий разделения данных приложения, пользовательского интерфейса и логики на соответствующие компоненты: модель, представление, контроллер.
     Этот концепт существует уже очень долгое время – впервые был описан Трюгве Реенскаугом еще в 1978 году. Однако получил широкое распространение и экспоненциальный рост с развитием интернета, так как оказалось, что это лучший способ проектирования клиент-серверных приложений. Все лучшие современные веб-фреймворки построены вокруг концепта MVC. Сам концепт довольно прост для понимания:
     a) Model(M) – модель или формализация данных. Это не сами данные, а интерфейс для доступа к ним. Модель позволяет получать данные с базы данных, не требуя знания тонкостей этой самой базы. Модель зачастую обеспечивает уровень абстракции над базой данных, так что одна и та же модель может быть использована с разными базами данных;
     б) View(V) – это то что мы видим, слой представления для нашей модели. На компьютере это, что мы видим в браузере при работе с веб- приложением, например. View также обеспечивает интерфейс для сбора пользовательского ввода;
     в) Controller(C) – контролирует течение информации между model и view, используя программную логику чтобы решить, какая информация должна быть извлечена из базы данных и какая информация передана view. Он также получает информацию от пользователя при помощи view и вносит соответствующие изменения в отображение или изменяет сами данные через model.
     Сложности возникают там, где требуется конкретно определить, на каком уровне что происходит – разные фреймворки имплементируют схожую функциональность по-разному. 
     Так и в случае с Django – несмотря на то, что он четко следует MVC, не обошлось без собственной логики в имплементации. Имеется в виду, что по большому счету Controller управляется самим фреймворком, а разработчик взаимодействует с model, темплейтами и view (MTV). Про темплейты будет подробнее дальше.
     Графическое представление модели MTV приведено на рисунке 5.
       
Рисунок 5


     4.3 Django Models 
     Модели обеспечивают уровень абстракции для базы данных. Используемая техника носит название Object-relational Mapping (ORM). 
     Большая часть баз данных используют SQL, однако каждая из них реализует это по-своему. Знание тонкостей SQL может быть довольно проблематичным. ORM, с другой стороны, обеспечивает простое сопоставление между объектом и базой данных. При этом программисту не нужно знать тонкостей устройства используемой базы данных или уметь писать сложные SQL запросы. 
     В Django модель - и есть этот объект. При создании модели Django создает соответствующую таблицу в базе данных, без необходимости писать SQL вручную. Это продемонстрировано на рисунке 6. 
        
      Рисунок 6


     1. Советов Б.Я., Цехановский В.В., Чертовской В.Д. Базы данных: теория и практика. Учебник М.: «Юрайт», 2012. – 464 с. Гриф УМО по университетскому политехническому образованию.
     2. Филипп Гуо Python is Now the Most Popular Introductory Teaching Language at Top U.S. Universities // Исследовательская организация Communications of the ACM – 2014. – 7 июля [Электронный ресурс]. URL: https://cacm.acm.org/blogs/blog-cacm/176450-python-is-now-the-most-popularintroductory-teaching-language-at-top-u-s-universities/fulltext (дата доступа: 22.04.2018) 
     3. Nigel George Mastering Django: Core. Chicago: GNW Independent Publishing; 1st ed., 2016
